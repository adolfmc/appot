package cn.licoy.wdog.core.controller.appot;import cn.licoy.wdog.common.annotation.SysLogs;import cn.licoy.wdog.common.bean.ResponseCode;import cn.licoy.wdog.common.bean.ResponseResult;import cn.licoy.wdog.common.controller.AppotBaseController;import cn.licoy.wdog.core.dto.appot.MessageAddDTO;import cn.licoy.wdog.core.entity.appot.Message;import cn.licoy.wdog.core.service.appot.MessageService;import io.swagger.annotations.Api;import com.alibaba.fastjson.JSONObject;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;/** * @author mc * @version Sat Dec 19 19:23:25 2020 */@RestControllerpublic class MessageController  extends AppotBaseController{   @Autowired   private MessageService service;   public MessageService getService() {      return service;   }   @RequestMapping(value = {"/saveMessage"})   @ApiOperation(value = "saveMessage")   @SysLogs("saveMessage")   public ResponseResult saveMessage(@RequestBody @Validated @ApiParam(value = "saveMessage") MessageAddDTO addDTO){       JSONObject jsonObject = null;       service.saveMessage(jsonObject);   return ResponseResult.e(ResponseCode.OK,jsonObject);   }   @RequestMapping(value = {"/getmessages"})   public ResponseResult getmessages(MessageAddDTO addDTO){      List<Message> messageList = service.getmessages(addDTO.getMobile());      List<Message> messageList2 =new ArrayList<Message>();      messageList2 = deepCopy( messageList);      for(Message message:messageList){         message.setIsRead("1");         service.insertOrUpdate(message);      }      return ResponseResult.e(ResponseCode.OK,messageList2);   }   @RequestMapping(value = {"/getReadTagNum"})   public ResponseResult getReadTagNum(MessageAddDTO addDTO){      List<Message> messageList = service.getmessages(addDTO.getMobile());      StringBuffer sql = new StringBuffer();      sql.append(" select * from ( ");      sql.append("  select count(1) suggest_count from biz_appot.biz_suggest bs where bs.is_read='0' and bs.mobile ='"+addDTO.getMobile()+"' ");      sql.append(" )a1,(");      sql.append("  select count(1) message_count from biz_appot.biz_message bm where bm.is_read='0' and bm.mobile ='"+addDTO.getMobile()+"' ");      sql.append(" )a2");      return ResponseResult.e(ResponseCode.OK,jdbcTemplate.queryForMap(sql.toString()));   }}