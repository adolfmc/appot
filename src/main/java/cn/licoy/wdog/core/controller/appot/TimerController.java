package cn.licoy.wdog.core.controller.appot;import cn.licoy.wdog.common.annotation.SysLogs;import cn.licoy.wdog.common.bean.ResponseCode;import cn.licoy.wdog.common.bean.ResponseResult;import cn.licoy.wdog.common.controller.AppotBaseController;import cn.licoy.wdog.core.dto.appot.TimerAddDTO;import cn.licoy.wdog.core.entity.appot.Timer;import cn.licoy.wdog.core.service.appot.TimerService;import io.swagger.annotations.Api;import com.alibaba.fastjson.JSONObject;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.Date;import java.util.List;import java.util.Map;/** * @author mc * @version Mon Oct 05 00:11:18 2020 */@RestControllerpublic class TimerController extends AppotBaseController {   @Autowired   private TimerService service;   public TimerService getService() {      return service;   }   @RequestMapping(value = {"/todayTimers"})   @ApiOperation(value = "todayTimers")   @SysLogs("todayTimers")   public ResponseResult todayTimers(){      List result =  jdbcTemplate.queryForList("select date_format(create_time,'%m%d') as 'DD' ,FGAMT(sum(case when `type`='SPORTS' then minutes else 0 end)/60/60,1 ) as SPORTS ,FGAMT(sum(case when `type`='SLEEP' then minutes else 0 end)/60/60,1 ) as SLEEP ,FGAMT(sum(case when `type`='APPOT' then minutes else 0 end)/60/60,1 ) as APPOT ,FGAMT(sum(case when `type`='BIU' then minutes else 0 end)/60/60,1 ) as BIU ,FGAMT(sum(case when `type`='BOOK' then minutes else 0 end)/60/60,1 ) as BOOK from biz_appot.mc_timer where minutes>100 group by DD order by DD desc limit 9");      return ResponseResult.e(ResponseCode.OK,result);   }   @RequestMapping(value = {"/timersLast"})   @ApiOperation(value = "timersLast")   @SysLogs("saveTimer")   public ResponseResult timersLast(){      Map<String,Object> result =  jdbcTemplate.queryForMap("select * from mc_timer where end_time is null order by create_time desc limit 1");      return ResponseResult.e(ResponseCode.OK,result);   }   @RequestMapping(value = {"/timers"})   @ApiOperation(value = "timers")   @SysLogs("saveTimer")   public ResponseResult timers(String id ,String isStart,String type){      Timer timer = new Timer();      timer.setCreateTime(new Date());      timer.setType(type);      if(isStart.equals("start") ){         timer.setStartTime(new Date());         timer.setId(id);      }else if(isStart.equals("end") ){         timer = service.selectById(id);         timer.setEndTime(new Date());         timer.setMinutes(  Long.valueOf( ( (new Date()).getTime() - timer.getStartTime().getTime()) /1000   ).intValue() );      }      service.insertOrUpdate(timer);   return ResponseResult.e(ResponseCode.OK,timer);   }}